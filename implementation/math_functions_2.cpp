#include "math_functions_2.h"

double max_between_two_numbers(double num1, double num2){
    if (num1 >= num2)
    	return num1;
    else
  	    return num2;
}

double min_between_three_numbers(double num1, double num2, double num3){
    if (num1 <= num2 && num1 <= num3)
      	return num1;
  	else if (num2 <= num1 && num2 <= num3)
      	return num2;
    else
      	return num3;
}

double min_index_between_three_numbers(double num1, double num2, double num3){
    if (num1 <= num2 && num1 <= num3)
      	return 0;
  	else if (num2 <= num1 && num2 <= num3)
      	return 1;
    else
      	return 2;
}

double euclidean_dist(double point1, double point2){
    double distance;
    distance = point1 - point2;
    distance = pow(distance,2);
    distance = sqrt(distance);
    return distance;
}

double create_grids_d(int num_of_curves_points){
    double d = (double)(4 * 2 * num_of_curves_points)/1000000;
    return d;
}

vector<double> make_vector(vector<double> &vec,int vector_start,int data_dimension){

    vector<double> point;
    for(int i = vector_start; i < vector_start + data_dimension; i++){
        point.push_back(vec[i]);
    }

    return point;
}


double t_uniformly_generated(double d){
    random_device rd;  // Will be used to obtain a seed for the random number engine
    mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
    uniform_real_distribution<> dis(0.0, d);
    // Use dis to transform the random unsigned int generated by gen into a 
    // double in [0, Î´)
    return dis(gen);
}